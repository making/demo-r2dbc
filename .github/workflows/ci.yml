name: CI
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: '11.x'
      - uses: actions/cache@v1
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: mvn package
        env:
          _JAVA_OPTIONS: -Djava.net.preferIPv4Stack=true
        run: |
          set -e
          ./mvnw -V package
      - name: mvn spring-boot:build-image
        if: github.ref == 'refs/heads/master'
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_NAME: ghcr.io/making/demo-r2dbc
        run: |
          set -e
          docker login ${IMAGE_NAME} -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
          set +e
          docker pull ${IMAGE_NAME}
          set -e
          ./mvnw -V spring-boot:build-image -Dspring-boot.build-image.imageName=${IMAGE_NAME} -Dmaven.test.skip=true
          docker push ${IMAGE_NAME}
      - uses: jvalkeal/setup-cf-cli@v0
        if: github.ref == 'refs/heads/master'
        with:
          version: 7.2.0
      - name: cf push
        if: github.ref == 'refs/heads/master'
        env:
          CF_API: ${{ secrets.CF_API }}
          CF_USERNAME: ${{ secrets.CF_USERNAME }}
          CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
          CF_ORG: ${{ secrets.CF_ORG }}
          CF_SPACE: ${{ secrets.CF_SPACE }}
        run: |
          set -e
          cf login -a ${CF_API} -u ${CF_USERNAME} -p ${CF_PASSWORD} -o ${CF_ORG} -s ${CF_SPACE}
          cf push --strategy rolling
      - name: E2E test
        if: github.ref == 'refs/heads/master'
        env:
          TARGET_URL: ${{ secrets.TARGET_URL }}
        run: |
          set -ex
          TODO_ID=$(curl -v -s ${TARGET_URL}/todos -H "Content-Type: application/json" -d '{"todoTitle": "Demo"}' | jq -r .todoId)
          curl -v -s ${TARGET_URL}/todos
          curl -v -s ${TARGET_URL}/todos/${TODO_ID}
          curl -v -s -X PUT ${TARGET_URL}/todos/${TODO_ID} -H "Content-Type: application/json" -d '{"finished": "true"}'
          curl -v -s -X DELETE ${TARGET_URL}/todos/${TODO_ID}
          curl -v -s ${TARGET_URL}/todos